{"ast":null,"code":"var _jsxFileName = \"/Users/andrearitondale/Github/defidrugs/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport './styles/App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport DeFiDrugs from './utils/DeFiDrugs.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = 'Andrea0x_eth';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = '';\nconst TOTAL_MINT_COUNT = 50;\n\n// I moved the contract address to the top for easy access.\nconst CONTRACT_ADDRESS = \"0x5134D66Ed4935453771F8DC1280CBa75395cDd7E\";\nconst App = () => {\n  _s();\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const checkIfWalletIsConnected = async () => {\n    const {\n      ethereum\n    } = window;\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n    const accounts = await ethereum.request({\n      method: 'eth_accounts'\n    });\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account);\n\n      // Setup listener! This is for the case where a user comes to our site\n      // and ALREADY had their wallet connected + authorized.\n      setupEventListener();\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  };\n\n  /*\n  * Implement your connectWallet method here\n  */\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      /*\n      * Fancy method to request access to account.\n      */\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n\n      /*\n      * Boom! This should print out public address once we authorize Metamask.\n      */\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n\n      // Setup listener! This is for the case where a user comes to our site\n      // and connected their wallet for the first time.\n      setupEventListener();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // Setup our listener.\n  const setupEventListener = async () => {\n    // Most of this looks the same as our function askContractToMintNft\n    try {\n      const {\n        ethereum\n      } = window;\n      if (ethereum) {\n        // Same stuff again\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, DeFiDrugs.abi, signer);\n\n        // THIS IS THE MAGIC SAUCE.\n        // This will essentially \"capture\" our event when our contract throws it.\n        // If you're familiar with webhooks, it's very similar to that!\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber());\n          alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`);\n        });\n        console.log(\"Setup event listener!\");\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const askContractToMintNft = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, DeFiDrugs.abi, signer);\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let nftTxn = await connectedContract.makeDeFiDrugs();\n        console.log(\"Mining...please wait.\");\n        await nftTxn.wait();\n        console.log(nftTxn);\n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n\n  // Render Methods\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: connectWallet,\n    className: \"cta-button connect-wallet-button\",\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 5\n  }, this);\n  const renderMintUI = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: askContractToMintNft,\n    className: \"cta-button connect-wallet-button\",\n    children: \"Mint NFT\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n\n  /*\n  * Added a conditional render! We don't want to show Connect to Wallet if we're already connected :).\n  */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header gradient-text\",\n          children: \"My NFT Collection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"Each unique. Each beautiful. Discover your NFT today.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this), currentAccount === \"\" ? renderNotConnectedContainer() : renderMintUI()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built on @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"Oez+vfH4X005OLgBo/Rzy9wdCKo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","ethers","twitterLogo","DeFiDrugs","TWITTER_HANDLE","TWITTER_LINK","OPENSEA_LINK","TOTAL_MINT_COUNT","CONTRACT_ADDRESS","App","currentAccount","setCurrentAccount","checkIfWalletIsConnected","ethereum","window","console","log","accounts","request","method","length","account","setupEventListener","connectWallet","alert","error","provider","providers","Web3Provider","signer","getSigner","connectedContract","Contract","abi","on","from","tokenId","toNumber","askContractToMintNft","nftTxn","makeDeFiDrugs","wait","hash","renderNotConnectedContainer","renderMintUI"],"sources":["/Users/andrearitondale/Github/defidrugs/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport './styles/App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport DeFiDrugs from './utils/DeFiDrugs.json';\n\n\nconst TWITTER_HANDLE = 'Andrea0x_eth';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = '';\nconst TOTAL_MINT_COUNT = 50;\n\n// I moved the contract address to the top for easy access.\nconst CONTRACT_ADDRESS = \"0x5134D66Ed4935453771F8DC1280CBa75395cDd7E\";\n \n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  \n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account)\n      \n      // Setup listener! This is for the case where a user comes to our site\n      // and ALREADY had their wallet connected + authorized.\n      setupEventListener()\n\n    } else {\n      console.log(\"No authorized account found\");\n    }\n    \n  }\n\n  /*\n  * Implement your connectWallet method here\n  */\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      /*\n      * Fancy method to request access to account.\n      */\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      /*\n      * Boom! This should print out public address once we authorize Metamask.\n      */\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]); \n      \n      // Setup listener! This is for the case where a user comes to our site\n      // and connected their wallet for the first time.\n      setupEventListener() \n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  // Setup our listener.\n  const setupEventListener = async () => {\n    // Most of this looks the same as our function askContractToMintNft\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        // Same stuff again\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, DeFiDrugs.abi, signer);\n\n        // THIS IS THE MAGIC SAUCE.\n        // This will essentially \"capture\" our event when our contract throws it.\n        // If you're familiar with webhooks, it's very similar to that!\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber())\n          alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`)\n        });\n\n        console.log(\"Setup event listener!\")\n\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const askContractToMintNft = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, DeFiDrugs.abi, signer);\n\n        console.log(\"Going to pop wallet now to pay gas...\")\n        let nftTxn = await connectedContract.makeDeFiDrugs();\n\n        console.log(\"Mining...please wait.\")\n        await nftTxn.wait();\n        console.log(nftTxn);\n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  };\n\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, [])\n\n  \n  // Render Methods\n  const renderNotConnectedContainer = () => (\n    <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n      Connect to Wallet\n    </button>\n  );\n\n  const renderMintUI = () => (\n    <button onClick={askContractToMintNft} className=\"cta-button connect-wallet-button\">\n      Mint NFT\n    </button>\n  )\n\n  /*\n  * Added a conditional render! We don't want to show Connect to Wallet if we're already connected :).\n  */\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">My NFT Collection</p>\n          <p className=\"sub-text\">\n            Each unique. Each beautiful. Discover your NFT today.\n          </p>\n          {currentAccount === \"\" ? renderNotConnectedContainer() : renderMintUI()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}